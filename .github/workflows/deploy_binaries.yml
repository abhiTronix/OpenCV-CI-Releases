# Copyright (c) 2019-2020 Abhishek Thakur(@abhiTronix) <abhi.una12@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release OpenCV Binaries

on:
  push:
    branches:
      - main
    tags:
      - "*"
  schedule:
    - cron: "0 0 14,28 * *"

jobs:
  create_gitrelease:
    name: Create GitHub Release
    runs-on: ubuntu-20.04
    outputs:
      output1: ${{ steps.set_release_name.outputs.release_name }}
      output2: ${{ steps.set_tag_name.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: install_apt_dep
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq unzip wget -y
          sudo apt-get install -qq dos2unix -y
          chmod +x check_old_assets.sh
      - name: install_pip_dep
        run: |
          pip install -U pip wheel CppHeaderParser
        if: success()
      - name: run check script
        run: bash check_old_assets.sh
        shell: bash
        if: success() && (github.event_name != 'push')
      - name: Get Release Name
        id: rel_name
        run: |
          NAME="Build $(date +'%Y-%m-%d %H:%M')"
          TAGNAME="build-$(date +'%Y-%m-%d-%H-%M')"
          echo "::set-output name=release_name::${TAGNAME}"
          echo "::set-output name=tag_name::${TAGNAME}"
        if: github.event_name != 'push' || contains(github.event.head_commit.message, '[RELEASE]')
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          RELEASE_NAME: ${{ steps.rel_name.outputs.release_name }}
          RELEASE_TAGNAME: ${{ steps.rel_name.outputs.tag_name }}
        with:
          tag_name: ${{ env.RELEASE_TAGNAME }}
          release_name: Release ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false
        if: github.event_name != 'push' || contains(github.event.head_commit.message, '[RELEASE]')
      - name: set release_name
        id: set_release_name
        run: echo "release_name=${RELEASE_NAME}" >> "$GITHUB_OUTPUT"
        if: github.event_name != 'push' || contains(github.event.head_commit.message, '[RELEASE]')
      - name: set tag_name
        id: set_tag_name
        run: echo "tag_name=${RELEASE_TAGNAME}" >> "$GITHUB_OUTPUT"
        if: github.event_name != 'push' || contains(github.event.head_commit.message, '[RELEASE]')
      
  build_n_upload:
    name: Build-Upload OpenCV Binaries
    needs: create_gitrelease
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: install_dependencies apt
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq unzip wget -y
          sudo apt-get install -qq dos2unix -y
          chmod +x create_opencv.sh
      - name: install_dependencies pip
        run: |
          pip install -U pip wheel numpy
        if: success()
      - name: run script
        run: bash create_opencv.sh
        shell: bash
        if: success()
      - name: display script ENVS
        run: |
          echo $OPENCV_NAME
          echo $OPENCV_PATHNAME
        if: success()
      - name: Upload Assets
        id: upload-assets
        uses: softprops/action-gh-release@v2
        env:
          OUTPUT1: ${{needs.create_gitrelease.outputs.output1}}
          OUTPUT2: ${{needs.create_gitrelease.outputs.output2}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.OPENCV_PATHNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.OUTPUT1 }}
          tag: ${{ env.OUTPUT2 }}
        if: github.event_name != 'push' || contains(github.event.head_commit.message, '[RELEASE]')
